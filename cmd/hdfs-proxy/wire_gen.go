// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/labstack/echo/v4"
	"github.com/mr-chelyshkin/scrumble/hdfs-proxy"
	"github.com/mr-chelyshkin/scrumble/internal/daemon"
	"github.com/mr-chelyshkin/scrumble/internal/http_router"
	"github.com/mr-chelyshkin/scrumble/internal/logger"
	"github.com/mr-chelyshkin/scrumble/internal/stat"
)

// Injectors from wire.go:

func Init(cfg hdfs_proxy.Config, route func(e *echo.Echo), in func(ctx context.Context)) (daemon.Daemon, func(), error) {
	contextContext, cleanup := daemon.ProvideContext()
	config, err := logger.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	zapLogger, err := logger.ProvideLoggerZap(config)
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	statConfig, err := stat.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	probe := http_router.ProvideProbe()
	statStat := stat.ProvideStat(statConfig, zapLogger, probe)
	daemonConfig, err := daemon.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	http_routerConfig, err := http_router.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	service := http_router.ProvideHttpRouter(contextContext, http_routerConfig, zapLogger, route, in)
	daemonDaemon := daemon.ProvideDaemon(contextContext, zapLogger, statStat, daemonConfig, service)
	return daemonDaemon, func() {
		cleanup()
	}, nil
}
