// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/mr-chelyshkin/scrumble/internal/daemon"
	"github.com/mr-chelyshkin/scrumble/internal/logger"
	"github.com/mr-chelyshkin/scrumble/internal/service"
	"github.com/mr-chelyshkin/scrumble/internal/stat"
	"github.com/mr-chelyshkin/scrumble/torrent-fetcher"
)

// Injectors from wire.go:

func Init(cfg torrent_fetcher.Config, app2 service.AppService) (daemon.Daemon, func(), error) {
	context, cleanup := daemon.ProvideContext()
	config, err := logger.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	zapLogger, err := logger.ProvideLoggerZap(config)
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	statConfig, err := stat.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	probe := service.ProvideProbe()
	statStat := stat.ProvideStat(statConfig, zapLogger, probe)
	daemonConfig, err := daemon.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	serviceConfig, err := service.ProvideConfig()
	if err != nil {
		cleanup()
		return daemon.Daemon{}, nil, err
	}
	daemonService := service.ProvideService(serviceConfig, zapLogger, app2)
	daemonDaemon := daemon.ProvideDaemon(context, zapLogger, statStat, daemonConfig, daemonService)
	return daemonDaemon, func() {
		cleanup()
	}, nil
}
